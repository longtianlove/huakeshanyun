package com.stys.ipfs.web.app;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.plugins.Page;
import com.stys.ipfs.code.IncomeOrOut;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.dto.UserAssetDetailVO;
import com.stys.ipfs.entity.AppUser;
import com.stys.ipfs.entity.Dic;
import com.stys.ipfs.entity.TbAssetsDetail;
import com.stys.ipfs.entity.TbFeimaOrder;
import com.stys.ipfs.entity.TbOfflinePayment;
import com.stys.ipfs.entity.TbUsdtlog;
import com.stys.ipfs.entity.TbUserAssets;
import com.stys.ipfs.service.FeimaService;
import com.stys.ipfs.service.IAppUserService;
import com.stys.ipfs.service.IDicService;
import com.stys.ipfs.service.ITbAssetsDetailService;
import com.stys.ipfs.service.ITbBackfillService;
import com.stys.ipfs.service.ITbFeimaOrderService;
import com.stys.ipfs.service.ITbOfflinePaymentService;
import com.stys.ipfs.service.ITbProductService;
import com.stys.ipfs.service.ITbUsdtlogService;
import com.stys.ipfs.service.ITbUserAssetsService;
import com.stys.ipfs.service.ITbUserExperienceService;
import com.stys.ipfs.service.ITbWithdrawadLogService;
import com.stys.ipfs.util.AppConstant;
import com.stys.ipfs.util.BigDecimalUtils;
import com.stys.ipfs.util.ParamUtils;
import com.stys.ipfs.util.RSAUtil;
import com.stys.ipfs.util.RandomUtil;
import com.stys.ipfs.util.SecuritySHA1Utils;
import com.stys.ipfs.util.StringUtils;
import com.stys.ipfs.util.UUIdUtils;

@RestController
@RequestMapping("/tbr")
public class AppFundsActionController extends AppController {

	@Reference(version = "1.0.0", check = false)
	private ITbOfflinePaymentService itbOfflinePaymentService;

	@Reference(version = "1.0.0", check = false)
	private ITbUsdtlogService itbUsdtlogService;

	@Reference(version = "1.0.0", check = false)
	private ITbUserAssetsService itbUserAssetsService;

	@Reference(version = "1.0.0", check = false)
	private ITbWithdrawadLogService itbWithdrawadLogService;

	@Reference(version = "1.0.0", check = false)
	private ITbAssetsDetailService itbAssetsDetailService;

	@Reference(version = "1.0.0", check = false)
	private IDicService idicService;

	@Reference(version = "1.0.0", check = false)
	private ITbBackfillService itbBackfillService;

	@Reference(version = "1.0.0", check = false)
	private IAppUserService iappUserService;

	@Reference(version = "1.0.0", check = false)
	private ITbProductService itbProductService;

	@Reference(version = "1.0.0", check = false)
	private ITbFeimaOrderService itbFeimaOrderService;

	@Reference(version = "1.0.0", check = false)
	private ITbUserExperienceService itbUserExperienceService;

	@Value("${feimaNotifyUrl}")
	private String feimaNotifyUrl;

	@Value("${merchantNo}")
	private String merchantNo;

	@Value("${cbs.imagesPath}")
	private String localImagesPath;

	@Value("${publicKey}")
	private String publicKey;

	@Value("${privateKey}")
	private String privateKey;

	@Value("${feimaPublicKey}")
	private String feimaPublicKey;

	/**
	 * 
	 * 
	 * @api {post} /tbr/getPerformanceDatas 个人业绩
	 * @apiParam {Integer} userId 用户id
	 * @apiGroup Finance
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/getPerformanceDatas
	 * @return
	 */
	@RequestMapping(value = "/getPerformanceDatas", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> getPerformanceDatas(Integer userId) {

		return new AppResultInfo<>(itbUserExperienceService.selectPerformanceData(userId));
	}

	@RequestMapping(value = "/rechargeByUsdt", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> rechargeByUsdt(String usdtAddress) {

		return new AppResultInfo<>(AppConstant.STATUE_1, "参数错误");
	}

	/**
	 * 
	 * 
	 * @api {post} /tbr/feimaNotifyUrl 通知
	 * @apiGroup feima
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/feimaNotifyUrl
	 * @return
	 */
	@RequestMapping(value = "/feimaNotifyUrl", method = RequestMethod.POST)
	@ResponseBody
	public AppResultInfo<?> feimaNotifyUrl(HttpServletRequest request, HttpServletResponse response) throws Exception {
		// 飞马钱包的RSA公钥
		FeimaService feimaService = new FeimaService();
		feimaService.feimaPublicKey = feimaPublicKey;
		feimaService.privateKey = privateKey;
		feimaService.publicKey = publicKey;

		String merchantNo = ParamUtils.getParameter(request, "merchantNo", "");
		String mchOrderNo = ParamUtils.getParameter(request, "mchOrderNo", "");
		String payOrderNo = ParamUtils.getParameter(request, "payOrderNo", "");
		String payTradeNo = ParamUtils.getParameter(request, "payTradeNo", "");
		String payAmount = ParamUtils.getParameter(request, "payAmount", "");
		String payTime = ParamUtils.getParameter(request, "payTime", "");
		String attach = ParamUtils.getParameter(request, "attach", "");
		String timestamp = ParamUtils.getParameter(request, "timestamp", "");
		String sign = ParamUtils.getParameter(request, "sign", "");

		Map<String, String> params = new HashMap<String, String>();
		params.put("merchantNo", merchantNo);
		params.put("mchOrderNo", mchOrderNo);
		params.put("payOrderNo", payOrderNo);
		params.put("payTradeNo", payTradeNo);
		params.put("payAmount", payAmount);
		params.put("payTime", payTime);
		params.put("attach", attach);
		params.put("timestamp", timestamp);

		logger.debug("接收到的参数：" + JSON.toJSONString(params));
		logger.debug("参数签名：" + sign);
		boolean checkSign = RSAUtil.rsa256CheckContent(params, sign, feimaPublicKey);
		if (checkSign) {
			logger.debug("=======>>签名校验成功");
			TbFeimaOrder tbFeimaOrder = itbFeimaOrderService
					.selectOne(new EntityWrapper<TbFeimaOrder>().eq("mchOrderNo", mchOrderNo));
			Integer user_id = tbFeimaOrder.getUserId();
			Float amount = Integer.valueOf(payAmount) / 100f;

			// 用户资产信息表
			TbUserAssets tbUserAssets = itbUserAssetsService
					.selectOne(new EntityWrapper<TbUserAssets>().eq("user_id", user_id));
			synchronized (tbUserAssets) {

				Float beforeCoin = tbUserAssets.getCoin();
				String afterCoin = BigDecimalUtils.add(String.valueOf(beforeCoin), String.valueOf(amount));
				tbUserAssets.setCoin(Float.valueOf(afterCoin));

				Dic dic = idicService.getDicData("账变类型", "飞码通充值");
				TbAssetsDetail entity = new TbAssetsDetail();
				entity.setId(UUIdUtils.getUUID());
				entity.setUserId(user_id);
				entity.setBeforeAmount(beforeCoin);
				entity.setAmount(amount);
				entity.setAfterAmount(Float.parseFloat(afterCoin));
				entity.setInOrOut(IncomeOrOut.expend.getCode());
				entity.setType(dic.getId());
				entity.setAccountType(1);// 金币类型
				// 增加充值日志
				if (itbAssetsDetailService.insert(entity)) {
					logger.debug("===增加充值日志成功========");
				}
				// 增加充值
				if (itbUserAssetsService.updateById(tbUserAssets)) {
					// 修改订单状态
					tbFeimaOrder.setStatus(1);
					itbFeimaOrderService.updateById(tbFeimaOrder);
					logger.debug("===增加充值成功========");
				}

			}

			tbFeimaOrder.setStatus(1);
			itbFeimaOrderService.updateById(tbFeimaOrder);

			response.getWriter().write("success");
		} else {
			logger.error("=======>>签名校验失败");
			return new AppResultInfo<>(AppConstant.STATUE_1, "充值回调失败，验证错误!");
		}

		return new AppResultInfo<>("购买成功!");

	}

	/**
	 * 创建金币支付订单
	 * 
	 * @api {post} /tbr/createPayOrder 创建金币支付订单
	 * @apiGroup feima
	 * @apiDescription 详细描述： 创建支付订单
	 * @apiParam {String} userId 用户编号
	 * @apiParam {String} productName 填写:金币
	 * @apiParam {String} productDesc 填写：平台等值货币，用于购买平台商品。
	 * @apiParam {String} amount 订单金额(单位：分)
	 * @apiParam {String} attach 附加信息
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/createPayOrder
	 * @return
	 */
	@RequestMapping(value = "/createPayOrder", method = RequestMethod.POST)
	@ResponseBody
	public AppResultInfo<?> createPayOrder(String userId, String productName, String productDesc, Integer amount,
			String attach) throws Exception {

		String mchOrderNo = RandomUtil.getOrderIdByTime();
		userId = (String) StringUtils.isEmptyBack(userId);
		productName = (String) StringUtils.isEmptyBack(productName);
		productDesc = (String) StringUtils.isEmptyBack(productDesc);
		if (null == amount) {
			amount = 0;
		}
		attach = (String) StringUtils.isEmptyBack(attach);

		FeimaService feimaService = new FeimaService();
		feimaService.feimaPublicKey = feimaPublicKey;
		feimaService.privateKey = privateKey;
		feimaService.publicKey = publicKey;
		String result = feimaService.createPayOrder(merchantNo, mchOrderNo, userId, productName, productDesc, amount,
				attach, feimaNotifyUrl);
		System.out.println(result);
		JSONObject jsonObject = JSON.parseObject(result);
		String msg = jsonObject.getString("msg");
		if (msg.equals("success")) {
			TbFeimaOrder tbFeimaOrder = new TbFeimaOrder();
			tbFeimaOrder.setAmount(amount);
			tbFeimaOrder.setAttach(attach);
			tbFeimaOrder.setMchOrderNo(mchOrderNo);
			tbFeimaOrder.setProductName(productName);
			tbFeimaOrder.setProductDesc(productDesc);
			tbFeimaOrder.setStatus(0);
			tbFeimaOrder.setUserId(Integer.valueOf(userId));
			String authMsgObject = jsonObject.getString("obj");
			JSONObject authjsonObject2 = JSON.parseObject(authMsgObject);
			tbFeimaOrder.setOrderToken(authjsonObject2.getString("orderToken"));
			if (itbFeimaOrderService.insert(tbFeimaOrder)) {

				return new AppResultInfo<>(AppConstant.STATUE_200, "创建订单成功", authjsonObject2);
			}
		}
		return new AppResultInfo<>(AppConstant.STATUE_1, "创建订单失败");

	}

	/**
	 * 
	 * @param mchOrderNo
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/fiemaOrderquery", method = RequestMethod.POST)
	@ResponseBody
	public AppResultInfo<?> fiemaOrderquery(String mchOrderNo) throws Exception {

		FeimaService feimaService = new FeimaService();
		feimaService.feimaPublicKey = feimaPublicKey;
		feimaService.privateKey = privateKey;
		feimaService.publicKey = publicKey;
		String result = feimaService.orderquery(merchantNo, mchOrderNo);
		return new AppResultInfo<>(AppConstant.STATUE_200, result);

	}

	/**
	 * 购买产品
	 * 
	 * @api {post} /tbr/buyProduct 购买产品
	 * @apiGroup Finance
	 * @apiDescription 详细描述： 购买产品
	 * @apiParam {Integer} userId 用户id
	 * @apiParam {String} productId 产品编号
	 * @apiParam {String} paymentCode 支付密码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/buyProduct
	 * @return
	 */
	@RequestMapping(value = "/buyProduct", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> buyProduct(String paymentCode, Integer userId, Integer productId) {
		if (null == userId || null == productId || null == paymentCode) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "参数错误");
		}
		AppUser appuser = iappUserService.selectById(userId);
		if (StringUtils.strIsNull(appuser.getPaymentCode())) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "请先设置支付密码！");
		}
		String temp_newWord = null;
		try {

			temp_newWord = SecuritySHA1Utils.shaEncode(paymentCode.trim());
		} catch (Exception e) {
			logger.info("=======密码解密异常========");
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		if (!appuser.getPaymentCode().equals(temp_newWord)) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		return itbProductService.buyProduct(userId, productId);
	}

	/**
	 * 查询usdt充值消费记录
	 * 
	 * @api {post} /tbr/queryUSDTLog 查询usdt充值消费记录
	 * @apiGroup Finance
	 * @apiDescription 详细描述： 金币划转
	 * @apiParam {Integer} userId 用户id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/query
	 * @return
	 */
	@RequestMapping(value = "/withdrawUSDT", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> withdrawUSDT(Integer userId) {
		if (null == userId) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "参数传递错误");
		}
		List<TbUsdtlog> tbUsdtlogs = itbUsdtlogService.selectUsdtlog(userId);
		return new AppResultInfo<>(tbUsdtlogs);
	}

	/**
	 * 查询usdt充值消费记录
	 * 
	 * @api {post} /tbr/queryUSDTLog 查询usdt充值消费记录
	 * @apiGroup USDT
	 * @apiDescription 详细描述： 金币划转
	 * @apiParam {Integer} userId 用户id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/queryUSDTLog
	 * @return
	 */
	@RequestMapping(value = "/queryUSDTLog", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> queryUSDTLog(Integer userId) {
		if (null == userId) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "参数传递错误");
		}
		List<TbUsdtlog> tbUsdtlogs = itbUsdtlogService.selectUsdtlog(userId);
		return new AppResultInfo<>(tbUsdtlogs);
	}

	/**
	 * 查询usdt充值消费记录
	 * 
	 * @api {post} /tbr/queryUSDTLog 查询usdt充值消费记录
	 * @apiGroup USDT
	 * @apiDescription 详细描述： 金币划转
	 * @apiParam {Integer} userId 用户id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/queryUSDTLog
	 * @return
	 */
	@RequestMapping(value = "/queryOfflinePayDetail", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> queryOfflinePayDetail(Integer userId, Integer page, Integer limit) {
		if (null == userId || limit == null || null == page) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "参数传递错误");
		}
		Page<TbOfflinePayment> pageObj = itbOfflinePaymentService.selectPage(new Page<TbOfflinePayment>(page, limit),
				new EntityWrapper<TbOfflinePayment>().eq("user_id", userId));
		return new AppResultInfo<>(pageObj);
	}

	/**
	 * 金币划转
	 * 
	 * @api {post} /tbr/transfer 金币划转
	 * @apiGroup Finance
	 * @apiDescription 详细描述： 金币划转
	 * @apiParam {Integer} ownerUserId 用户id
	 * @apiParam {String} phone 对方账号
	 * @apiParam {Float} balance 划转金额
	 * @apiParam {String} paymentCode 支付密码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/transfer
	 * @return
	 */
	@RequestMapping(value = "/transfer", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> transfer(String paymentCode, Integer ownerUserId, String phone,
			Float balance) {
		AppUser appuser = iappUserService.selectById(ownerUserId);
		if (StringUtils.isEmpty(appuser.getPaymentCode())) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "请先设置支付密码！");
		}
		String temp_newWord = null;
		try {

			temp_newWord = SecuritySHA1Utils.shaEncode(paymentCode.trim());
		} catch (Exception e) {
			logger.info("=======密码解密异常========");
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		if (!appuser.getPaymentCode().equals(temp_newWord)) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		if (appuser.getPhone().equals(phone)) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "不能转入当前账户！");
		}
		return itbUserAssetsService.transfer(ownerUserId, phone, balance);

	}

	/**
	 * 获取当前用户的账户明细
	 * 
	 * @api {post} /tbr/queryBalance 获取当前用户的账户明细（分页）
	 * @apiGroup userBase
	 * @apiDescription 详细描述： 获取当前用户的账户明细 inOrOut 0表示减少 1表示增加
	 * @apiParam {Integer} userId 用户Id
	 * @apiParam {Integer} page 当前页
	 * @apiParam {Integer} limit 每页多少条
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/queryBalance
	 * @return
	 */
	@RequestMapping(value = "/queryBalance", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> queryBalance(Integer userId, Integer page, Integer limit) {
		Page<UserAssetDetailVO> pageObj = itbAssetsDetailService
				.getAessetForUser(new Page<UserAssetDetailVO>(page, limit), userId);
		return new AppResultInfo<>(pageObj);
	}

	/**
	 * 提现申请
	 * 
	 * @api {post} /tbr/withdrawCash 提现申请
	 * @apiGroup Business
	 * @apiDescription 详细描述： 提现申请
	 * @apiParam {Integer} userId 用户Id
	 * @apiParam {Float} cashNumber 提现金额
	 * @apiParam {String} paymentCode 支付密码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/withdrawCash
	 * @return
	 */
	@RequestMapping(value = "/withdrawCash", method = RequestMethod.POST)
	public @ResponseBody AppResultInfo<?> withdraw_cash(String paymentCode, Integer userId, Float cashNumber) {
		AppUser appuser = iappUserService.selectById(userId);
		if (StringUtils.isEmpty(appuser.getPaymentCode())) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "请先设置支付密码！");
		}
		String temp_newWord = null;
		try {

			temp_newWord = SecuritySHA1Utils.shaEncode(paymentCode.trim());
		} catch (Exception e) {
			logger.info("=======密码解密异常========");
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		if (!appuser.getPaymentCode().equals(temp_newWord)) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "支付密码错误请重新输入！");
		}
		return itbWithdrawadLogService.withdraw_cash(userId, cashNumber);
	}

	@RequestMapping(value = "/callBackFMwallet", method = RequestMethod.POST)
	public @ResponseBody void callBackFMwallet(String code, String msg, Object obj) {

		System.out.println("code:" + code);
		System.out.println("msg:" + msg);
		System.out.println("obj:" + obj.toString());

	}

}
