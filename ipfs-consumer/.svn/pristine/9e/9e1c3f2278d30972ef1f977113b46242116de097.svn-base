package com.stys.ipfs.web.app;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;

import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.session.Session;
import org.apache.shiro.session.mgt.SessionKey;
import org.apache.shiro.web.session.mgt.WebSessionKey;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.dubbo.config.annotation.Reference;
import com.aliyun.oss.OSSClient;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.dto.AppUserInfoVo;
import com.stys.ipfs.entity.AppUser;
import com.stys.ipfs.entity.AppUserinfo;
import com.stys.ipfs.entity.TbInvite;
import com.stys.ipfs.entity.TbPersonalInfo;
import com.stys.ipfs.ex.TokenException;
import com.stys.ipfs.service.IAppLoginLogService;
import com.stys.ipfs.service.IAppUserService;
import com.stys.ipfs.service.IAppUserinfoService;
import com.stys.ipfs.service.IDicService;
import com.stys.ipfs.service.ITbInviteService;
import com.stys.ipfs.service.ITbPersonalInfoService;
import com.stys.ipfs.util.AliyunOSSClientUtil;
import com.stys.ipfs.util.AppConstant;
import com.stys.ipfs.util.AuthenticationUtil;
import com.stys.ipfs.util.ComUtil;
import com.stys.ipfs.util.JWTUtil;
import com.stys.ipfs.util.ReduceImgUtil;
import com.stys.ipfs.util.SecuritySHA1Utils;
import com.stys.ipfs.util.UUIdUtils;


@RestController
@RequestMapping("/tbr")
public class AppHomeController extends AppController {


	@Reference(version = "1.0.0", check = false)
	private ITbInviteService itbInviteService;


	@Reference(version = "1.0.0", check = false)
	private IDicService idicService;
	
	@Reference(version = "1.0.0" , check = false)
	private IAppLoginLogService iappLoginLogService;
	
	@Reference(version = "1.0.0", check = false)
    private IAppUserinfoService iappUserinfoService;
	
	@Reference(version = "1.0.0", check = false)
    private IAppUserService iappUserService;
	
	@Reference(version = "1.0.0", check = false)
	private ITbPersonalInfoService itbPersonalInfoService;

	/**
	 * 	更新头像
	 * @api {post} /tbr/changeAvater 更新头像
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：更新头像
	 * @apiParam {String} avater  头像地址
	 * @apiParam {String} nickname  用户昵称
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/changeAvater
	 * @return
	 */
	@RequestMapping("/changeAvater")
	 public @ResponseBody AppResultInfo<?> changeAvater(String avater,String nickname,HttpServletRequest request){
		String email = getEmailBytoken(request);
		AppUser appuser=iappUserService.selectOne(new EntityWrapper<AppUser>().eq("email", email));
		AppUserinfo appuserinfo= iappUserinfoService.selectOne(new EntityWrapper<AppUserinfo>().eq("user_id", appuser.getId()));
		appuserinfo.setAvater(avater);
		appuserinfo.setNickname(nickname);
		if(iappUserinfoService.updateById(appuserinfo)) {
			return new AppResultInfo<>("修改成功"); 
		}
		return new AppResultInfo<>(-1, "更新失败");
	}
	
	 /**
	 *	单个文件上传
	 * @api {post} /tbr/uploadImgAndVideo 单个文件上传
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：单个文件上传（包含视频上传）视频不能大于20M 
	 * @apiParam {MultipartFile}  file
	 * @apiParam request
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/uploadImgAndVideo
	 * @return
	 */
	 @RequestMapping("/uploadImg")
	 public @ResponseBody AppResultInfo<?> upImgForOss(@RequestParam("file") MultipartFile file,
				HttpServletRequest request) throws  IOException{
			if (file.isEmpty()) {
				return new AppResultInfo<>(-1, "文件为空");
			}
			// 获取文件名
			String fileName = file.getOriginalFilename();
			logger.info("上传的文件名为：" + fileName);
			// 获取文件的后缀名
			String suffixName = fileName.substring(fileName.lastIndexOf("."));
			logger.info("上传的后缀名为：" + suffixName);
			String timestamp = System.currentTimeMillis()+"";

			if (ResourceBundle.getBundle("config/thirdParty").getString("suffix_name").indexOf(suffixName.toLowerCase().trim()) == -1) {
				return new AppResultInfo<>(-1, "上传文件格式错误");  
			}

			// 初始化OSSClient
			String imagePath = ResourceBundle.getBundle("config/thirdParty").getString("uploadimg_path");
			String src_dest_path=imagePath + timestamp + File.separator + fileName;
			//图片原路径
			File dest = new File(src_dest_path); 
			//压缩后路劲
			File temp = new File(imagePath + timestamp + File.separator + UUIdUtils.getUUID() + ".png"); 
			// 检测是否存在目录
			if (!dest.getParentFile().exists()) {
				dest.getParentFile().mkdirs();
			}
			if (!temp.getParentFile().exists()) {
				temp.getParentFile().mkdirs();
			}
			file.transferTo(dest);
			//图片压缩像素
			int[] arr=ReduceImgUtil.getImgWidthHeight(dest);
			ReduceImgUtil.reduceImg(src_dest_path,temp.getCanonicalPath(), arr[0], arr[1], null); 
			
			OSSClient ossClient = AliyunOSSClientUtil.getOSSClient();
			String[] s =AliyunOSSClientUtil.uploadObject2OSS(ossClient,temp,"ipfsuser",timestamp);
			dest.delete(); 
			temp.delete(); 
	        logger.info("文件路径:"+ s[1]); 
	        String url = AliyunOSSClientUtil.getUrl(ossClient,"ipfsuser", s[1]); 
	        logger.info("访问网址路径:" + url); //
			return new AppResultInfo<>(url);
	 }
	 private String getEmailBytoken(HttpServletRequest request) {
			
			if (ComUtil.isEmpty(request.getHeader("token"))) {

				throw new TokenException("-4", "您无权操作！");
			}
			String token = request.getHeader("token");
			String email = JWTUtil.getUsername(token);
			return email;
		}
	/**
	 * 	修改登陆密码  
	 * @api {post} /tbr/changePassword 修改登陆密码  
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：修改登陆密码    
	 * @apiParam {String} oldPassword 旧密码
	 * @apiParam {String} newPassword 新密码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/changePassword
	 * @return
	 */
	 @RequestMapping("/changePassword")
	 public @ResponseBody AppResultInfo<?> changePassword(String oldPassword,String newPassword,HttpServletRequest request){
		 String email = getEmailBytoken(request);
		 AppUser appuser=iappUserService.selectOne(new EntityWrapper<AppUser>().eq("email", email));
		 String temp_oldWord=null;
		 String temp_newWord=null;
		 try {
			 temp_oldWord=SecuritySHA1Utils.shaEncode(oldPassword.trim());
			 temp_newWord=SecuritySHA1Utils.shaEncode(newPassword.trim());
		 } catch (Exception e) {
			 logger.info("=======密码解密异常========");
		 }
		 if(!temp_oldWord.equals(appuser.getPassword())) {
			 return new AppResultInfo<>(AppConstant.STATUE_1,"旧密码输入错误");
		 }
		 appuser.setPassword(temp_newWord);
		 iappUserService.updateById(appuser);
		 return new AppResultInfo<>(AppConstant.STATUE_200,"修改成功！");
	 }
	
	/**
	 * 	修改支付密码  
	 * @api {post} /tbr/changePaymentCode 修改支付密码  
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：修改支付密码  
	 * @apiParam {String} oldPaymentCode 旧密码
	 * @apiParam {String} newPaymentCode 新密码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/changePaymentCode
	 * @return
	 */
	 @RequestMapping("/changePaymentCode")
	 public @ResponseBody AppResultInfo<?> changePaymentCode(String oldPaymentCode,String newPaymentCode,HttpServletRequest request){
		 String email = getEmailBytoken(request);
		 AppUser appuser=iappUserService.selectOne(new EntityWrapper<AppUser>().eq("email", email));
		 String temp_oldWord=null;
		 String temp_newWord=null;
		 try {
			 temp_oldWord=SecuritySHA1Utils.shaEncode(oldPaymentCode.trim());
			 temp_newWord=SecuritySHA1Utils.shaEncode(newPaymentCode.trim());
		 } catch (Exception e) {
			 logger.info("=======密码解密异常========");
		 }
		 if(!temp_oldWord.equals(appuser.getPaymentCode())) {
			 return new AppResultInfo<>(AppConstant.STATUE_1,"旧支付密码输入错误");
		 }
		 appuser.setPaymentCode(temp_newWord);
		 iappUserService.updateById(appuser);
		 return new AppResultInfo<>(AppConstant.STATUE_200,"修改成功！");
		
	 }
	
	 /**
	 * 找回密码 
	 * @api {post} /tbr/findPassword 找回密码 
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：找回密码 
	 * @apiParam {String} email
	 * @apiParam {String} code
	 * @apiParam {String} newPassWord
	 * @apiParam {String} sessionId
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/findPassword
	 * @return
	 */
	@RequestMapping("/findPassword")
	 public @ResponseBody AppResultInfo<?> findPassword(String email,String code, String newPassWord,
			 String sessionId,ServletRequest request, ServletResponse response ){
		 Map<String, Object> result= this.returnMap();
		 //验证  验证码
		 if(ComUtil.isEmpty(sessionId)) {
				result.put("state", AppConstant.STATUE_2);
				result.put("msg", "重新发送验证码");
				return new AppResultInfo<>(result);
			}
			SessionKey sessionKey = new WebSessionKey(sessionId, request, response);
			Session session = SecurityUtils.getSecurityManager().getSession(sessionKey);
			if (null != session) {
				if (!code.equals(session.getAttribute(email).toString())) {
					result.put("state", AppConstant.STATUE_1);
					result.put("msg", "验证码错误");
					return new AppResultInfo<>(result);
				}
				session.setAttribute(email, null);
			}else {
				result.put("state", AppConstant.STATUE_2);
				result.put("msg", "重新发送验证码");
				return new AppResultInfo<>(result);
			}
			
		AppUser appuser=iappUserService.selectOne(new EntityWrapper<AppUser>().eq("email", email));
		String tempCode=null;
		try {
			tempCode=SecuritySHA1Utils.shaEncode(newPassWord.trim());
		} catch (Exception e1) {
			logger.error("密码加密出错");
		}
		appuser.setPassword(tempCode);
		iappUserService.updateById(appuser);
		return new AppResultInfo<>(AppConstant.STATUE_200,"密码找回成功！");
	 }
	
	/**
	 * 	实名认证 
	 * @api {post} /tbr/authentication 实名认证 
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：实名认证
	 * @apiParam {String} bankCard  银行卡号
	 * @apiParam {String} idCard 身份证号码
	 * @apiParam {String} name 真实姓名
	 * @apiParam {String} phone 手机号码
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/authentication
	 * @return
	 */
	@RequestMapping("/authentication")
	public @ResponseBody AppResultInfo<?> authenticationForUser(String bankCard,String idCard,String name,String phone){
		TbPersonalInfo personalinfo=AuthenticationUtil.getAuthenticationInfo(bankCard, idCard, name, phone);
		if(personalinfo.getPersonalStatus()!=1) {
			return new AppResultInfo<>(AppConstant.STATUE_1,personalinfo.getRemark());
		}
		itbPersonalInfoService.insert(personalinfo);
		return new AppResultInfo<>(AppConstant.STATUE_200,"认证成功！");
	}
	
	/**
	 * 用户基本信息
	 * @api {post} /tbr/getUserInfo 用户基本信息
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：用户基本信息
	 * @apiParam {Integer} userId 用户Id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/authentication
	 */
	@RequestMapping("/getUserInfo")
	public @ResponseBody AppResultInfo<?>  getUserInfo(Integer userId){
		AppUserInfoVo appuserunfovo=iappUserinfoService.getUserInfo(userId);
		return new AppResultInfo<>(appuserunfovo);
	}
	
	/**
	 * 我的好友
	 * @api {post} /tbr/getMyFriend 我的好友
	 * @apiGroup 用户基础信息
	 * @apiDescription 详细描述：我的好友
	 * @apiParam {Integer} userId 用户Id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/getMyFriend
	 */
	@RequestMapping("/getMyFriend")
	public @ResponseBody AppResultInfo<?> getMyFriend(Integer userId){
		List<TbInvite> list=itbInviteService.selectList(new EntityWrapper<TbInvite>().eq("tb_iviter", userId));
		List <Integer> arrId=new ArrayList<>();
		if(list.size()>0||list!=null) {
			for (TbInvite tbInvite : list) {
				arrId.add(tbInvite.getTbIvitee());
			}
		}
		List<AppUser> listapp= iappUserService.selectList(new EntityWrapper<AppUser>().in("id", arrId).orderBy(false, "create_time", false));
		return new AppResultInfo<>(listapp);
	}
	
}
