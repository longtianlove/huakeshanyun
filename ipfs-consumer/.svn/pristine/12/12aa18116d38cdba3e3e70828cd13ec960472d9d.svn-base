package com.stys.ipfs.web.app;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.dubbo.config.annotation.Reference;
import com.aliyun.oss.OSSClient;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.dto.UserInfoVo;
import com.stys.ipfs.entity.TbInvite;
import com.stys.ipfs.entity.Userinfo;
import com.stys.ipfs.ex.TokenException;
import com.stys.ipfs.service.IAppLoginLogService;
import com.stys.ipfs.service.IAppUserService;
import com.stys.ipfs.service.IDicService;
import com.stys.ipfs.service.ITbInviteService;
import com.stys.ipfs.service.IUserinfoService;
import com.stys.ipfs.util.AliyunOSSClientUtil;
import com.stys.ipfs.util.AppConstant;
import com.stys.ipfs.util.ComUtil;
import com.stys.ipfs.util.JWTUtil;
import com.stys.ipfs.util.ReduceImgUtil;
import com.stys.ipfs.util.StringUtils;
import com.stys.ipfs.util.UUIdUtils;


@RestController
@RequestMapping("/tbr")
public class UserBaseinfoController extends AppController {

	@Reference(version = "1.0.0", check = false)
	private IAppUserService iappUserService;

	@Reference(version = "1.0.0")
	private ITbInviteService itbInviteService;

	@Reference(version = "1.0.0", check = false)
	private IUserinfoService iuserinfoService;

	@Reference(version = "1.0.0", check = false)
	private IDicService idicService;
	
	@Reference(version = "1.0.0" , check = false)
	private IAppLoginLogService iappLoginLogService;
	

	/**
	 * 	用户基础信息
	 * @api {post} /tbr/userInfo 用户基础信息
	 * @apiGroup tbr
	 * @apiDescription 详细描述：用户基础信息
	 * @apiParam {Integer} userId 用户Id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/userInfo
	 * @return
	 */
	@RequestMapping("/userInfo")
	public @ResponseBody AppResultInfo<UserInfoVo> getUserinfo(Integer userId) {
		UserInfoVo userInfoVo = iuserinfoService.selectOneToUserInfoVo(userId);
		if(StringUtils.isEmpty(userInfoVo)) {
			return new AppResultInfo<>(AppConstant.STATUE_200,"请重新登录！"); 
		}
		EntityWrapper<Userinfo> towrapper = new EntityWrapper<>();
		if(null!=userInfoVo&&null!=userInfoVo.getInvitationCode()) {
			
			towrapper.eq("code", userInfoVo.getInvitationCode());
			Userinfo touserInfo =iuserinfoService.selectOne(towrapper);  
			if(null!=touserInfo){
				userInfoVo.setTonickname(touserInfo.getNickname()); 
				userInfoVo.setToUserId(touserInfo.getUserId());
			}
		}
		return new AppResultInfo<>(userInfoVo); 
	}

	
	

	private String getPhoneBytoken(HttpServletRequest request) {
		
		if (ComUtil.isEmpty(request.getHeader("token"))) {

			throw new TokenException("-4", "您无权操作！");
		}
		String token = (String) request.getHeader("token");
		String phone = JWTUtil.getUsername(token);
		return phone;
	}


	/**
	 * 	更新头像
	 * @api {post} /tbr/changeAvater 更新头像
	 * @apiGroup tbr
	 * @apiDescription 详细描述：更新头像
	 * @apiParam {String} avater  头像地址
	 * @apiParam {String} nickname  用户昵称
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/changeAvater
	 * @return
	 */
	@RequestMapping("/changeAvater")
	public @ResponseBody AppResultInfo<?> changeAvater(Userinfo inUserinfo,HttpServletRequest request) {
	 
		String phone = getPhoneBytoken(request);
		Userinfo userinfo = iuserinfoService.selectByPhone(phone);
		userinfo.setAvater(inUserinfo.getAvater()); 
		userinfo.setNickname(inUserinfo.getNickname());
		if (iuserinfoService.updateById(userinfo)) {
			return new AppResultInfo<>("修改成功"); 
		}
		return new AppResultInfo<>(-1, "更新失败");
	}

	/**
	 * 	我的好友 列表
	 * @api {post} /tbr/getMyFriend 我的好友 列表
	 * @apiGroup tbr
	 * @apiDescription 详细描述：我的好友 列表
	 * @apiParam {Integer} userId 用户Id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/getMyFriend
	 * @return
	 */
	@RequestMapping("/getMyFriend")
	public @ResponseBody AppResultInfo<Map<String,Object>> getMyFriend(Integer userId){
		Set<Integer> userSet=new HashSet<>();
		Set<Integer> set=getmyInviter(userSet,userId);
		List<Userinfo> list=new ArrayList<Userinfo>();
		if(set!=null&&set.size()>0) {
			list=iuserinfoService.selectList(new EntityWrapper<Userinfo>().in("user_id", set));
		}
		Map<String,Object> result=new HashMap<>();
		result.put("state", AppConstant.STATUE_200);
		result.put("msg",AppConstant.MSG);
		result.put("data",list);
		return new AppResultInfo<>(result);
	}
	private Set<Integer> getmyInviter(Set<Integer> userSet,Integer userId) {
		List<TbInvite> list=itbInviteService.selectList(new EntityWrapper<TbInvite>().eq("tb_iviter", userId));
		if(list.size()>0&&list!=null) {
			for (TbInvite tbInvite : list) {
				Set<Integer> set=getmyInviter(userSet,tbInvite.getTbIvitee());
				userSet.add(tbInvite.getTbIvitee());
				userSet.addAll(set);
			}
		}
		return userSet;
	}
	 /**
	 *	单个文件上传
	 * @api {post} /tbr/uploadImgAndVideo 单个文件上传
	 * @apiGroup tbr
	 * @apiDescription 详细描述：单个文件上传（包含视频上传）视频不能大于20M 
	 * @apiParam {MultipartFile}  file
	 * @apiParam request
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/uploadImgAndVideo
	 * @return
	 */
	@RequestMapping("/uploadImgAndVideo")
	 public @ResponseBody AppResultInfo<?> upImgForOss(@RequestParam("file") MultipartFile file,
				HttpServletRequest request) throws  IOException{
			if (file.isEmpty()) {
				return new AppResultInfo<>(-1, "文件为空");
			}
			// 获取文件名
			String fileName = file.getOriginalFilename();
			logger.info("上传的文件名为：" + fileName);
			// 获取文件的后缀名
			String suffixName = fileName.substring(fileName.lastIndexOf("."));
			logger.info("上传的后缀名为：" + suffixName);
			String phone = getPhoneBytoken(request);

			if (ResourceBundle.getBundle("config/thirdParty").getString("suffix_name").indexOf(suffixName.toLowerCase().trim()) == -1) {
				return new AppResultInfo<>(-1, "上传文件格式错误");  
			}

			// 初始化OSSClient
			String imagePath = ResourceBundle.getBundle("config/thirdParty").getString("uploadimg_path");
			String src_dest_path=imagePath + phone + File.separator + fileName;
			//图片原路径
			File dest = new File(src_dest_path); 
			//压缩后路劲
			File temp = new File(imagePath + phone + File.separator + UUIdUtils.getUUID() + ".png"); 
			// 检测是否存在目录
			if (!dest.getParentFile().exists()) {
				dest.getParentFile().mkdirs();
			}
			if (!temp.getParentFile().exists()) {
				temp.getParentFile().mkdirs();
			}
			file.transferTo(dest);
			
			int[] arr=ReduceImgUtil.getImgWidthHeight(dest);
			ReduceImgUtil.reduceImg(src_dest_path,temp.getCanonicalPath(), arr[0], arr[1], null); 
			
			OSSClient ossClient = AliyunOSSClientUtil.getOSSClient();
			String[] s =AliyunOSSClientUtil.uploadObject2OSS(ossClient,temp,"ipfsuser",phone);
			dest.delete(); 
			temp.delete(); 
	        logger.info("文件路径:"+ s[1]); 
	        String url = AliyunOSSClientUtil.getUrl(ossClient,"ipfsuser", s[1]); 
	        logger.info("访问网址路径:" + url); //
			return new AppResultInfo<>(url);
	 }
	 
	 /**
	 * 	多文件上传
	 * @api {post} /tbr/uploadImgs 多文件上传
	 * @apiGroup tbr
	 * @apiDescription 详细描述：多文件上传 
	 * @apiParam {MultipartFile}  file[]
	 * @apiParam request
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/uploadImgs
	 * @return
	 */
	@RequestMapping("/uploadImgs")
	 public @ResponseBody AppResultInfo<?> upImgs(@RequestParam("files") MultipartFile[] files,
				HttpServletRequest request) throws  IOException{
		 if(files.length<=0) {
			 return new AppResultInfo<>(-1, "文件为空"); 
		 }
		 String phone = getPhoneBytoken(request);
		 List<String> urlList=new ArrayList<>();
		 for (MultipartFile file : files) {
				 // 获取文件名
				 String fileName = file.getOriginalFilename();
				 logger.info("上传的文件名为：" + fileName);
				 // 获取文件的后缀名
				 String suffixName = fileName.substring(fileName.lastIndexOf("."));
				 logger.info("上传的后缀名为：" + suffixName);
				 if (ResourceBundle.getBundle("config/thirdParty").getString("suffix_name").indexOf(suffixName.toLowerCase().trim()) == -1) {
					 return new AppResultInfo<>(-1, "上传文件格式错误");  
				 }
				 
				 // 初始化OSSClient
				 String imagePath = ResourceBundle.getBundle("config/thirdParty").getString("uploadimg_path");
				 String src_dest_path=imagePath + phone + File.separator + fileName;
				 File dest = new File(src_dest_path); 
				 // 检测是否存在目录
				 if (!dest.getParentFile().exists()) {
					 dest.getParentFile().mkdirs();
				 }
				 file.transferTo(dest);
				 OSSClient ossClient = AliyunOSSClientUtil.getOSSClient();
				 String[] s =AliyunOSSClientUtil.uploadObject2OSS(ossClient,dest,"ipfsuser",phone);
				 dest.delete(); 
				 logger.info("文件路径:"+ s[1]); 
				 String url = AliyunOSSClientUtil.getUrl(ossClient,"ipfsuser", s[1]); 
				 logger.info("访问网址路径:" + url);
				 urlList.add(url);
		}
		 return new AppResultInfo<>(urlList);
	 }
	/**
	 * 	绑定邮箱
	 * @api {post} /tbr/bindEmail 绑定邮箱
	 * @apiGroup tbr
	 * @apiDescription 详细描述：绑定邮箱
	 * @apiParam {Integer} userId 用户Id
	 * @apiParam {String} email 邮箱地址 
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/uploadImgs
	 * @return
	 */
	@RequestMapping("/bindEmail")
	public @ResponseBody AppResultInfo<?> bindEmail(Integer userId ,String email){
		Userinfo userinfo=iuserinfoService.selectOne(new EntityWrapper<Userinfo>().eq("user_id", userId));
		if(userinfo!=null) {
			userinfo.setEmail(email);
			iuserinfoService.updateById(userinfo);
			return new AppResultInfo<>( "绑定邮箱成功！"); 
		}
		return new AppResultInfo<>(-1, "参数错误！"); 
	}
}
