package com.stys.ipfs.web.app;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.entity.TbContract;
import com.stys.ipfs.entity.TbPersonalInfo;
import com.stys.ipfs.entity.TbProduct;
import com.stys.ipfs.entity.TbUserBuyLog;
import com.stys.ipfs.service.IAppUserService;
import com.stys.ipfs.service.ITbContractService;
import com.stys.ipfs.service.ITbPersonalInfoService;
import com.stys.ipfs.service.ITbProductService;
import com.stys.ipfs.service.ITbUserBuyLogService;
import com.stys.ipfs.util.BigDecimalUtils;
import com.stys.ipfs.util.CnNumberUtils;
import com.stys.ipfs.util.DateUtil;
import com.stys.ipfs.util.WordUtil;

@RestController
@RequestMapping("/tbr")
public class AppContractConroller extends AppController {
	
    @Reference(version = "1.0.0", check = false)
    private ITbContractService itbContractService;
    
    @Reference(version = "1.0.0", check = false)
    private ITbUserBuyLogService itbUserBuyLogService;
    
    @Reference(version = "1.0.0", check = false)
	private IAppUserService iappUserService;
    
    @Reference(version = "1.0.0", check = false)
    private ITbProductService itbProductService;
    
    @Reference(version = "1.0.0", check = false)
    private ITbPersonalInfoService itbPersonalInfoService;
    
    public @ResponseBody AppResultInfo<?> getContract(Integer userId){
    	List<TbUserBuyLog> list=itbUserBuyLogService.selectList(new EntityWrapper<TbUserBuyLog>().eq("user_id", userId).eq("status", 1));//未生成合同的
    	String phone=iappUserService.selectById(userId).getPhone();
    	TbPersonalInfo tbpersonalinfo=itbPersonalInfoService.selectOne(new EntityWrapper<TbPersonalInfo>().eq("user_id", userId)); 
    	TbProduct tbproduct=itbProductService.selectList(null).get(0);
    	//获取单价
    	 Map<String,Object> header = new HashMap<String, Object>();  
	   	 header.put("width", 100);  
	   	 header.put("height", 100);  
	   	 header.put("type", "png");  
	   	 header.put("content", "D:/word/gongz.png");
	   	 String unitPrice=BigDecimalUtils.Divide(tbproduct.getProductPreferentialPrice().toString(), tbproduct.getProductType().toString());
	   	 //word 模板路径 D:/budaowen/word/target/classes/conf/5082.docx
	   	 
	   	 for (TbUserBuyLog userbuylog : list) {
	   		 String contractnumber=	getContractNumber();
    		Map<String,Object> map = new HashMap<>();
    		Date date=userbuylog.getCreateTime();
    		String time=new SimpleDateFormat("yyyyMMdd").format(date);
           	 map.put("${tupian}", header);
           	 map.put("${phone}", phone);//账号
           	 map.put("${idCard}", tbpersonalinfo.getIdcard());//身份证号码
           	 map.put("${realName}", tbpersonalinfo.getRealName());//姓名
           	 map.put("${type}", userbuylog.getProductType());//购买了对少T
           	 map.put("${unitPrice}", unitPrice);//单价
           	 map.put("${money}", userbuylog.getProductPrice());//总价
           	 map.put("${RMB}", CnNumberUtils.convertNumber(Double.parseDouble(userbuylog.getProductPrice().toString())));//大写的总价
           	 map.put("${year}", time.substring(0, 3));//合同签订日期
           	 map.put("${month}", time.substring(3, 5));//合同签订日期
           	 map.put("${day}", time.substring(5, 7));//合同签订日期
           	 map.put("${contractNumber}", contractnumber);
           	 long path=System.currentTimeMillis();
           	 String result = WordUtil.replaceAndGenerateWord("D:/budaowen/word/target/classes/conf/5082.docx", map, "d:/word/433.docx");  
           	 if(result.equals("fail")) {
           		break; 
           	 }
           	TbContract tbcontract=new TbContract ();
           	tbcontract.setContractAddress(result);
           	tbcontract.setContractNumber(contractnumber);
           	tbcontract.setUserId(userId);
           	tbcontract.setCreateDate(new Date());
           	itbContractService.insertOrUpdate(tbcontract);
           	userbuylog.setStatus(2);
           	itbUserBuyLogService.updateById(userbuylog);
		}
    	return null;
    }
    
    /**合同编号生成规则：1101  2019  0408 0001
     * 1101为固定数字 2019为年 0408是日期 0001是当日顺序编号
     * @return
     */
    public  String getContractNumber() {
    	String date= DateUtil.getDays();
    	TbContract tbcontract= itbContractService.selectList(new EntityWrapper<TbContract>().like("create_date", date).orderBy(false,
				"create_date")).get(0);
    	if(tbcontract==null) {
    		return "1101"+date+"0001";
    	}else {
    		String number=tbcontract.getContractNumber();
    		String temp=number.substring(11, number.length());
    		int i=Integer.parseInt(temp)+1;
    		return "1101"+date+i;
    	}
    }
    public static void main(String[] args) {
    	AppContractConroller tconroller=new AppContractConroller();
    	System.out.println(tconroller.getContractNumber());
	}
}
