package com.stys.ipfs.config;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.annotation.AfterReturning;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Before;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import com.stys.ipfs.ex.TokenException;
import com.stys.ipfs.util.ComUtil;
import com.stys.ipfs.util.JWTUtil;

@Aspect
@Component
public class WebLogAspect {

	private Logger logger = Logger.getLogger(getClass());

	ThreadLocal<Long> startTime = new ThreadLocal<>();

	@Pointcut("execution(public * com.stys.ipfs.web..*.*(..))")
	public void webLog() {
	}

	@Before("webLog()")
	public void doBefore(JoinPoint joinPoint) throws TokenException {
		startTime.set(System.currentTimeMillis());
		// 接收到请求，记录请求内容
		ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();
		if(null!=attributes) {
			HttpServletRequest request = attributes.getRequest();
			String url = request.getRequestURL().toString();
			logger.info("URL : " +url);
			Boolean flag = filterTokenDefinedMap(url);
			throwNoauth(request, flag);

			// 记录下请求内容
			
			logger.info("HTTP_METHOD : " + request.getMethod());
			logger.info("IP : " + request.getRemoteAddr());
			logger.info("CLASS_METHOD : " + joinPoint.getSignature().getDeclaringTypeName() + "."
					+ joinPoint.getSignature().getName());
			logger.info("ARGS : " + Arrays.toString(joinPoint.getArgs()));

		}
		
	}

	private void throwNoauth(HttpServletRequest request, Boolean flag) {
		if (flag) {

			if (ComUtil.isEmpty(request.getHeader("token"))) {

				throw new TokenException("-5", "您无权操作！"); 
			}
			String token = (String) request.getHeader("token");
			if (!JWTUtil.verify(token, JWTUtil.getUsername(token))) {
				throw new TokenException("-4", "您无权操作，请重新登录！");
			}
		}
	}

	private Boolean filterTokenDefinedMap(String url) {
		Map<String, Boolean> filterTokenMap = new HashMap<>();
		filterTokenMap.put("/tbr/", true);
		filterTokenMap.put("/tbr/verifyUser", false);//验证用户是否存在
		filterTokenMap.put("/tbr/register", false);//注册
		filterTokenMap.put("/tbr/login", false);//登录
		filterTokenMap.put("/tbr/sendMessage", false);//发送邮箱验证码
		filterTokenMap.put("/tbr/getProductList", false);//获取商品列表
		filterTokenMap.put("/tbr/getProductDetail", false);//获取商品详细
		filterTokenMap.put("/tbr/uploadImg", true);//上传图片
		filterTokenMap.put("/tbr/changeAvater", true);//修改头像  昵称
		filterTokenMap.put("/tbr/findPassword", false); //找回密码
		filterTokenMap.put("/tbr/changePassword", true);//修改登录密码
		filterTokenMap.put("/tbr/changePaymentCode", true);//修改支付密码
		filterTokenMap.put("/tbr/authentication", false);//实名认证
//		TODO 充值 购买 提现 （手动审核） 账务详细展示  三方认证
		Boolean flag = false;

		for (String filterUrl : filterTokenMap.keySet()) {
			if (url.indexOf("/tbr") != -1) {
				String newUlr = url.substring(url.indexOf("/tbr"));
				newUlr=newUlr.replaceAll("/",",");
				String eqfilterUrl=filterUrl.replaceAll("/",",");
				if (newUlr.equals(eqfilterUrl) ){ 

					flag = filterTokenMap.get(filterUrl);
					break;
				}
			}

		}
		return flag;
	}

	@AfterReturning(returning = "ret", pointcut = "webLog()")
	public void doAfterReturning(Object ret) throws Throwable {
		// 处理完请求，返回内容
		logger.info("RESPONSE : " + ret);
		logger.info("SPEND TIME : " + (System.currentTimeMillis() - startTime.get()));
	}

}