package com.stys.ipfs.web;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AccountException;
import org.apache.shiro.authc.DisabledAccountException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.crypto.hash.SimpleHash;
import org.apache.shiro.session.Session;
import org.apache.shiro.util.ByteSource;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.dubbo.config.annotation.Reference;
import com.google.code.kaptcha.Constants;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.dto.DirectoryInfo;
import com.stys.ipfs.dto.RoleInfo;
import com.stys.ipfs.dto.UserInfo;
import com.stys.ipfs.entity.Permission;
import com.stys.ipfs.entity.User;
import com.stys.ipfs.ex.BusinessException;
import com.stys.ipfs.service.ILoginLogService;
import com.stys.ipfs.service.IPermissionService;
import com.stys.ipfs.service.IUserService;
import com.stys.ipfs.util.AppConstant;
import com.stys.ipfs.util.Constant;
import com.stys.ipfs.util.RandomNumUtil;
import com.stys.ipfs.util.SMSUtil;

/**
 * @author
 */
@Controller
public class HomeController extends BaseController {

	@Reference(version = "1.0.0", check = false)
	private IPermissionService iPermissionService;

	@Reference(version = "1.0.0", check = false)
	private IUserService iUserService;

	@Reference(version = "1.0.0", check = false)
	private ILoginLogService iloginLogService;

	@Value("${cbs.imagesPath}")
	private String mImagesPath;

	@RequestMapping("/*")
	public void toHtml() {

	}

	@RequestMapping({ "/", "/index" })
	public String index(Model model) {

		List<DirectoryInfo> directoryList = new ArrayList<>();
		// 获取当前用户角色信息
		UserInfo userInfo = this.getUserInfo();
		RoleInfo roleInfo = userInfo.getRoleInfo();
		List<Permission> permissionList = iPermissionService.getAllDirectoryPermissions();
		if (permissionList != null) {
			for (Permission ps : permissionList) {
				if (roleInfo.getPermissionIds().contains("," + ps.getId() + ",")) {
					System.out.println("------------" + ps.getPermissionName() + "\n");
					directoryList.add(new DirectoryInfo(ps.getPermissionName(), ps.getPermissionCode()));
				}
			}
		}
		model.addAttribute("directoryList", directoryList);

		return "index";
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login() {
		return "login";
	}

	@RequestMapping(value = "/kickout", method = RequestMethod.GET)
	public String kickOut() {
		return "login";
	}

	@RequestMapping(value = "/download", method = RequestMethod.GET)
	public String downloadFile(HttpServletRequest request, HttpServletResponse response)
			throws UnsupportedEncodingException {

		// 获取指定目录下的第一个文件
		File scFileDir = new File(mImagesPath + "/sys/app/");
		File TrxFiles[] = scFileDir.listFiles();
		System.out.println(TrxFiles[0]);
		String fileName = TrxFiles[0].getName(); // 下载的文件名

		// 如果文件名不为空，则进行下载
		if (fileName != null) {
			// 设置文件路径
			String realPath = mImagesPath + "/sys/app/";
			File file = new File(realPath, fileName);

			// 如果文件名存在，则进行下载
			if (file.exists()) {

				// 配置文件下载
				response.setHeader("content-type", "application/octet-stream");
				response.setContentType("application/octet-stream");
				// 下载文件能正常显示中文
				response.setHeader("Content-Disposition",
						"attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));

				// 实现文件下载
				byte[] buffer = new byte[1024];
				FileInputStream fis = null;
				BufferedInputStream bis = null;
				try {
					fis = new FileInputStream(file);
					bis = new BufferedInputStream(fis);
					OutputStream os = response.getOutputStream();
					int i = bis.read(buffer);
					while (i != -1) {
						os.write(buffer, 0, i);
						i = bis.read(buffer);
					}
					System.out.println("Download the file successfully!");
				} catch (Exception e) {
					System.out.println("Download the file failed!");
				} finally {
					if (bis != null) {
						try {
							bis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
					if (fis != null) {
						try {
							fis.close();
						} catch (IOException e) {
							e.printStackTrace();
						}
					}
				}
			}
		}
		return null;
	}

	@SuppressWarnings("unused")
	@RequestMapping(value = "/login2", method = RequestMethod.POST)
	@ResponseBody
	public AppResultInfo<?> login2(String username, String password, HttpServletRequest request,
			ServletResponse response, String code) throws BusinessException {

		logger.info("HomeController.login2()");

		UserInfo userInfo = iUserService.findUserInfo(username);
		if (null == userInfo) {

			return new AppResultInfo<>(AppConstant.STATUE_1, "用户不存在");
		}
		SimpleAuthenticationInfo authenticationInfo = new SimpleAuthenticationInfo(userInfo, // 用户信息
				password, // 密码
				ByteSource.Util.bytes(userInfo.getCredentialsSalt()), // salt=username+salt
				username);
		SimpleHash simpleHash = new SimpleHash("md5", password, username + userInfo.getSalt(), 2);

		if (!userInfo.getPassWord().equals(simpleHash.toString())) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "用户名或密码错误");
		}

		HttpServletRequest httpServletRequest = request;
		HttpSession session = httpServletRequest.getSession();

		// 取出验证码
		String validateCode = (String) session.getAttribute(Constants.KAPTCHA_SESSION_KEY);
		if (code != null && validateCode != null && !code.equals(validateCode)) {
			return new AppResultInfo<>(AppConstant.STATUE_1, "验证码错误");
		}

		String phone = userInfo.getPhone();
		int randomNum4 = RandomNumUtil.getRandom(4);
		String romNum4 = String.valueOf(randomNum4);
		if (SMSUtil.doGetStr(phone, null, romNum4)) {
			System.out.println("手机验证码---》" + romNum4);
			Session session1 = SecurityUtils.getSubject().getSession();
			session1.setAttribute(phone, romNum4);
			String phoneNumber = phone.substring(0, 3) + "****" + phone.substring(9, phone.length());
			request.getSession().setAttribute("phone", phoneNumber);
			// session1.setTimeout(300000);
			session1.setAttribute("Myuser", userInfo);
		}

		return new AppResultInfo<>(AppConstant.STATUE_200, "success");
	}

	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(HttpServletRequest request) throws BusinessException {

		logger.info("HomeController.login()");

		// 登录失败从request中获取shiro处理的异常信息.
		// shiroLoginFailure:就是shiro异常类的全类名.
		String exception = (String) request.getAttribute("shiroLoginFailure");
		logger.info("exception=" + exception);
		Session session = SecurityUtils.getSubject().getSession();
		UserInfo userInfo = (UserInfo) session.getAttribute("Myuser");
		// pcode
		if (null == session.getAttribute(userInfo.getPhone()) || null == request.getParameter("pcode")) {
			return "redirect:/";
		}
		String pcode = request.getParameter("pcode");
		String romNum4 = (String) session.getAttribute(userInfo.getPhone());
		// 使用完成，清除手机号码
		// request.getSession().setAttribute("phone", null);
		if (!pcode.equals(romNum4)) {
			throw new BusinessException("4", "手机短信码错误");
		}

		if (exception != null) {
			if (AccountException.class.getName().equals(exception)) {
				logger.info("AccountException ---> 账号或密码错误！");
				throw new BusinessException("1", "账号或密码错误！");
			} else if (IncorrectCredentialsException.class.getName().equals(exception)) {
				if (null == session.getAttribute(Constant.LOGIN_ERROR_COUNT)) {
					logger.info("AccountException ---> 登录次数错误！");
					throw new BusinessException(Constant.YES_ERROR, "密码错误");
				}
				// 密码最多错误输入5次
				int loginErrorCount = Integer.parseInt(session.getAttribute(Constant.LOGIN_ERROR_COUNT) + "");
				if (++loginErrorCount == Constant.MAX_LOGIN_ERROR_NUM) {
					// 锁定账号
					User user = iUserService
							.selectById(Integer.parseInt(session.getAttribute(Constant.LOGIN_USER_ID) + ""));
					user.setState(2);
					iUserService.updateById(user);
				}
				session.setAttribute(Constant.LOGIN_ERROR_COUNT, loginErrorCount);
				logger.info("AccountException ---> 密码错误！");
				throw new BusinessException(Constant.YES_ERROR,
						"密码错误，您还有" + (Constant.MAX_LOGIN_ERROR_NUM - loginErrorCount) + "机会！");
			} else if (DisabledAccountException.class.getName().equals(exception)) {
				logger.info("DisabledAccountException ---> 账号已禁用！");
				throw new BusinessException(Constant.YES_ERROR, "账号已禁用！");
			} else if (LockedAccountException.class.getName().equals(exception)) {
				logger.info("LockedAccountException ---> 账号已锁定！");
				throw new BusinessException(Constant.YES_ERROR, "账号已锁定，请联系管理员解锁！");
			} else if ("kaptchaValidateFailed".equals(exception)) {
				logger.info("kaptchaValidateFailed ---> 验证码错误！");
				throw new BusinessException(Constant.YES_ERROR, "验证码错误！");
			} else {
				logger.info("else ---> " + exception);
				throw new BusinessException(Constant.YES_ERROR, "未知错误！");
			}
		}
		// 初始化登录错误次数
		session.setAttribute(Constant.LOGIN_ERROR_COUNT, 0);
		// 记录登录IP地址
		session.setAttribute(Constant.LOGIN_IP_ADDRESS, this.getIpAddress(request));

		// 此方法不处理登录成功,由shiro进行处理
		return "/login";
	}

	@RequestMapping(value = "/verifyCode", method = { RequestMethod.POST, RequestMethod.GET })
	public String verify(HttpServletRequest request) {
		String pcode = request.getParameter("pcode");
		Session session = SecurityUtils.getSubject().getSession();
		UserInfo userInfo = this.getUserInfo();
		String code = (String) session.getAttribute(userInfo.getPhone());
		if (pcode.equals(code)) {
			session.setAttribute(userInfo.getPhone(), "");
			return "redirect:/";
		}
		return "redirect:login";
	}
}