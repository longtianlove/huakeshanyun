package com.stys.ipfs.web.app;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.fastjson.JSONObject;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.stys.ipfs.code.IncomeOrOut;
import com.stys.ipfs.dto.AppResultInfo;
import com.stys.ipfs.entity.Dic;
import com.stys.ipfs.entity.TbAssetsDetail;
import com.stys.ipfs.entity.TbUserAssets;
import com.stys.ipfs.entity.TbVipminer;
import com.stys.ipfs.service.IDicService;
import com.stys.ipfs.service.ITbAssetsDetailService;
import com.stys.ipfs.service.ITbUserAssetsService;
import com.stys.ipfs.service.ITbVipminerService;
import com.stys.ipfs.util.BigDecimalUtils;
import com.stys.ipfs.util.DateUtil;
import com.stys.ipfs.util.UUIdUtils;
@RestController
@RequestMapping("/tbr")
public class AppVipMinnerController extends AppController {
	@Reference(version = "1.0.0", check = false)
	private ITbVipminerService itbVipminerService;

	@Reference(version = "1.0.0", check = false)
	private IDicService idicService;

	@Reference(version = "1.0.0", check = false)
	private ITbAssetsDetailService itbAssetsDetailService;
	
	@Reference(version = "1.0.0", check = false)
	private ITbUserAssetsService itbUserAssetsService;

	/**
	 * 	超级矿工基本信息
	 * @api {post} /tbr/vipminerInfo 超级矿工基本信息
	 * @apiGroup userBase
	 * @apiDescription 详细描述：超级矿工基本信息
	 * @apiParam {Integer} userId 用户Id
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/vipminerInfo
	 */
	@RequestMapping("/vipminerInfo")
	public @ResponseBody AppResultInfo<?> getVipMinerInfo(Integer userId) {
		Map<String, Object> map = new HashMap<>();
		TbVipminer tbvipminer = itbVipminerService.selectOne(new EntityWrapper<TbVipminer>().eq("user_id", userId));
		map.put("totalCoin", tbvipminer.getGiftCoin());
		map.put("limitCoin", tbvipminer.getLimitCoin());
		Dic dic = idicService.getDicData("账变类型", "平台分红");
		// 昨天
		String yesterday = DateUtil.getYesterday();

		Map<String, Object> map2 = itbAssetsDetailService
				.selectMap((new EntityWrapper<TbAssetsDetail>().setSqlSelect("SUM(amount) as yesterdayEarnings")
						.eq("type", dic.getId()).eq("user_id", userId).like("create_time", yesterday)));
		if (map2 != null && map2.size() > 0) {
			Double yesterdayEarnings = (Double) map2.get("yesterdayEarnings");
			map.put("yesterdayEarnings", yesterdayEarnings);
		} else {
			map.put("yesterdayEarnings", "0.00");
		}
		List<TbAssetsDetail> list = itbAssetsDetailService.selectList(new EntityWrapper<TbAssetsDetail>()
				.eq("type", dic.getId()).eq("user_id", userId).orderBy(false, "create_time"));
		map.put("list", list);
		return new AppResultInfo<>(JSONObject.toJSON(map));
	}
	/**
	 * 	超级矿工推广礼包划转
	 * @api {post} /tbr/getEarningsDetailForUser 超级矿工推广礼包划转
	 * @apiGroup userBase
	 * @apiDescription 详细描述：超级矿工推广礼包划转
	 * @apiParam {Integer} userId 用户Id
	 * @apiParam {Float} balance 划转金额
	 * @apiVersion 0.1.0
	 * @apiSampleRequest http://127.0.0.1/tbr/getEarningsDetailForUser
	 */
	
	@RequestMapping("/vipgiftCoinTransfer")
	public @ResponseBody AppResultInfo<?> getVipGiftCoinTransfer(Integer userId, Float balance) {
		TbVipminer tbvipminer = itbVipminerService.selectOne(new EntityWrapper<TbVipminer>().eq("user_id", userId));
		Float giftCoin = tbvipminer.getGiftCoin();
		Float limitCoin = tbvipminer.getLimitCoin();
		if (giftCoin < balance) {
			return new AppResultInfo<>(-1, "推广礼包金额不足");
		}
		if (limitCoin < balance) {
			return new AppResultInfo<>(-1, "已超过剩余转出额度");
		}
		TbUserAssets userassets=itbUserAssetsService.selectOne(new EntityWrapper<TbUserAssets>().eq("user_id", userId));
		
		Float coin=userassets.getCoin();
		String newCoin= BigDecimalUtils.add(coin.toString(), balance.toString());
		String newgiftCoin= BigDecimalUtils.subtract(giftCoin.toString(), balance.toString());
		String newlimitCoin= BigDecimalUtils.subtract(limitCoin.toString(), balance.toString());
		userassets.setCoin(Float.parseFloat(newCoin));
		
		itbUserAssetsService.updateById(userassets);
		
		tbvipminer.setGiftCoin(Float.parseFloat(newgiftCoin));
		tbvipminer.setLimitCoin(Float.parseFloat(newlimitCoin));
		itbVipminerService.updateById(tbvipminer);
		
		Dic dic=idicService.getDicData("账变类型", "收益划转");
		TbAssetsDetail entity = new TbAssetsDetail();
		entity.setId(UUIdUtils.getUUID());
		entity.setUserId(userId);
		entity.setBeforeAmount(giftCoin);
		entity.setAmount(balance);
		entity.setAfterAmount(Float.parseFloat(newgiftCoin));
		entity.setInOrOut(IncomeOrOut.expend.getCode());
		entity.setType(dic.getId());
		itbAssetsDetailService.insert(entity);
		
		TbAssetsDetail assetsdetail = new TbAssetsDetail();
		assetsdetail.setId(UUIdUtils.getUUID());
		assetsdetail.setUserId(userId);
		assetsdetail.setBeforeAmount(coin);
		assetsdetail.setAmount(balance);
		assetsdetail.setAfterAmount(Float.parseFloat(newCoin));
		assetsdetail.setInOrOut(IncomeOrOut.income.getCode());
		assetsdetail.setType(dic.getId());
		itbAssetsDetailService.insert(assetsdetail);
		return new AppResultInfo<>("划转成功！");
	}

}
