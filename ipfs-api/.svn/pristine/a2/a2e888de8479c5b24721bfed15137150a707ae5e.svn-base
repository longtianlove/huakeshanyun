package com.stys.ipfs.util;

import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;

/**
 * 说明：日期处理
 */
public class DateUtil {

	private final static SimpleDateFormat sdfYear = new SimpleDateFormat("yyyy");
	private final static SimpleDateFormat sdfDay = new SimpleDateFormat("yyyy-MM-dd");
	private final static SimpleDateFormat sdfDays = new SimpleDateFormat("yyyyMMdd");
	public final static SimpleDateFormat sdfTime = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	private final static SimpleDateFormat sdfTimes = new SimpleDateFormat("yyyyMMddHHmmss");

	/**
	 * 获取YYYY格式
	 * 
	 * @return
	 */
	public static String getSdfTimes() {
		return sdfTimes.format(new Date());
	}

	/**
	 * 获取YYYY格式
	 * 
	 * @return
	 */
	public static String getYear() {
		return sdfYear.format(new Date());
	}

	/**
	 * 获取YYYY-MM-DD格式
	 * 
	 * @return
	 */
	public static String getDay() {
		return sdfDay.format(new Date());
	}

	/**
	 * 获取下一年的日期
	 * 
	 * @return
	 */
	public static Date getNextDate() {

		Calendar calendar = Calendar.getInstance();
		Date date = new Date(System.currentTimeMillis());
		calendar.setTime(date);
		// calendar.add(Calendar.WEEK_OF_YEAR, -1);
		calendar.add(Calendar.YEAR, 1);
		date = calendar.getTime();
		return date;

	}

	/**
	 * 
	 * @return
	 */
	public static String getNextDateTime() {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		return format.format(getNextDate());

	}

	public static Date getNextNetDate() {
		try {
			Calendar cal = Calendar.getInstance();
			cal.setTime(fomatDate(getNetworkTime("http://www.baidu.com")));
			cal.add(Calendar.YEAR, 1);
			Date date = cal.getTime();
			return date;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return getNextDate();
	}

	/**
	 * 获取YYYYMMDD格式
	 * 
	 * @return
	 */
	public static String getDays() {
		return sdfDays.format(new Date());
	}

	/**
	 * 获取YYYY-MM-DD HH:mm:ss格式
	 * 
	 * @return
	 */
	public static String getTime() {
		return sdfTime.format(new Date());
	}

	/***
	 * java得到网络时间
	 * 
	 * @param webUrl
	 * @return
	 */
	public static String getNetworkTime(String webUrl) {
		try {
			URL url = new URL(webUrl);
			URLConnection conn = url.openConnection();
			conn.connect();
			long dateL = conn.getDate();
			Date date = new Date(dateL);
			SimpleDateFormat dateFormat = new SimpleDateFormat("YYYY-MM-dd HH:mm:ss");
			return dateFormat.format(date);
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

		return "";
	}

	/**
	 * @Title: compareDate
	 * @Description: TODO(日期比较，如果s>=e 返回true 否则返回false)
	 * @param s
	 * @param e
	 * @return boolean
	 * @throws @author fh
	 */
	public static boolean compareDate(String s, String e) {
		if (fomatDate(s) == null || fomatDate(e) == null) {
			return false;
		}
		return fomatDate(s).getTime() >= fomatDate(e).getTime();
	}

	/**
	 * 格式化日期
	 * 
	 * @return
	 */
	public static Date fomatDate(String date) {
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		try {
			return fmt.parse(date);
		} catch (ParseException e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 指定日期加上天数后的日期
	 * 
	 * @param num     为增加的天数
	 * @param newDate 创建时间
	 * @return
	 * @throws ParseException
	 */
	public static String plusDay(int num, String newDate) throws ParseException {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date currdate = format.parse(newDate);
		Calendar ca = Calendar.getInstance();
		ca.add(Calendar.DATE, num);// num为增加的天数，可以改变的
		currdate = ca.getTime();
		String enddate = format.format(currdate);
		return enddate;
	}

	/**
	 * 给时间加上几个小时
	 * 
	 * @param day  当前时间 格式：yyyy-MM-dd HH:mm:ss
	 * @param hour 需要加的时间
	 * @return
	 */
	public static String addDateMinut(String newDate, int hour) {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = format.parse(newDate);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		if (date == null)
			return "";
		System.out.println("front:" + format.format(date)); // 显示输入的日期
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.HOUR, hour);// 24小时制
		date = cal.getTime();
		System.out.println("after:" + format.format(date)); // 显示更新后的日期
		cal = null;
		return format.format(date);

	}
	
	/**
	 * 当前时间增加天数 
	 * @param num
	 * @return
	 */
	public static String addDay(int num){
		   Date d = new Date();
		   SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		   String currdate = format.format(d);
		   Calendar ca = Calendar.getInstance();
		   ca.add(Calendar.DATE, num);// num为增加的天数，可以改变的
		   d = ca.getTime();
		   String enddate = format.format(d);
		   System.out.println("增加天数以后的日期：" + enddate);
		   return enddate;


	}
	
	/**
	 * 当前时间增加天数
	 * @param num
	 * @return
	 */
	public static Date addDay2(int num){
		   Date d = new Date();
		   SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		   String currdate = format.format(d);
		   Calendar ca = Calendar.getInstance();
		   ca.add(Calendar.DATE, num); 
		  
		  
		   return ca.getTime();

	}
	/**
	 * 给时间加上几个分钟
	 * 
	 * @param newDate
	 * @param hour
	 * @return
	 */
	public static String addDateMin(String newDate, int min) {
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = null;
		try {
			date = format.parse(newDate);
		} catch (Exception ex) {
			ex.printStackTrace();
		}
		if (date == null)
			return "";
		System.out.println("front:" + format.format(date)); // 显示输入的日期
		Calendar cal = Calendar.getInstance();
		cal.setTime(date);
		cal.add(Calendar.MINUTE, min);
		date = cal.getTime();
		System.out.println("after:" + format.format(date)); // 显示更新后的日期
		cal = null;
		return format.format(date);
	}

	/**
	 * 格式化日期
	 * 
	 * @return
	 */
	public static String fomatDate(Date date) {
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		try {
			return fmt.format(date);
		} catch (Exception e) {
			e.printStackTrace();
			return null;
		}
	}

	/**
	 * 得到昨天的日期yyyy-MM-dd
	 * 
	 * @return
	 */
	public static String getYesterday() {
		Calendar cal = Calendar.getInstance();
		// System.out.println(Calendar.DATE);//5
		cal.add(Calendar.DATE, -1);
		Date time = cal.getTime();
		String yesterday = new SimpleDateFormat("yyyy-MM-dd").format(time);
		return yesterday;
	}

	/**
	 * 明天
	 * 
	 * @return
	 */
	public static String getTomorrowday() {
		Calendar cal = Calendar.getInstance();
		// System.out.println(Calendar.DATE);//5
		cal.add(Calendar.DATE, 1);
		Date time = cal.getTime();
		String tomorrowday = new SimpleDateFormat("yyyy-MM-dd").format(time);
		return tomorrowday;
	}

	/**
	 * 校验日期是否合法
	 * 
	 * @return
	 */
	public static boolean isValidDate(String s) {
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		try {
			fmt.parse(s);
			return true;
		} catch (Exception e) {
			// 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
			return false;
		}
	}

	/**
	 * @param startTime
	 * @param endTime
	 * @return
	 */
	public static int getDiffYear(String startTime, String endTime) {
		DateFormat fmt = new SimpleDateFormat("yyyy-MM-dd");
		try {
			// long aa=0;
			int years = (int) (((fmt.parse(endTime).getTime() - fmt.parse(startTime).getTime()) / (1000 * 60 * 60 * 24))
					/ 365);
			return years;
		} catch (Exception e) {
			// 如果throw java.text.ParseException或者NullPointerException，就说明格式不对
			return 0;
		}
	}

	/**
	 * <li>功能描述：时间相减得到天数
	 * 
	 * @param beginDateStr
	 * @param endDateStr
	 * @return long
	 * @author Administrator
	 */
	public static long getDaySub(String beginDateStr, String endDateStr) {
		long day = 0;
		java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd");
		java.util.Date beginDate = null;
		java.util.Date endDate = null;

		try {
			beginDate = format.parse(beginDateStr);
			endDate = format.parse(endDateStr);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		day = (endDate.getTime() - beginDate.getTime()) / (24 * 60 * 60 * 1000);
		// System.out.println("相隔的天数="+day);

		return day;
	}

	public static long getDaySub(String beginDateStr, Date endDate) {
		long day = 0;
		java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd");
		java.util.Date beginDate = null;
		try {
			beginDate = format.parse(beginDateStr);
		} catch (ParseException e) {
			e.printStackTrace();
		}
		day = (endDate.getTime() - beginDate.getTime()) / (24 * 60 * 60 * 1000);
		// System.out.println("相隔的天数="+day);

		return day;
	}

	/**
	 * 得到n天之后的日期
	 * 
	 * @param days
	 * @return
	 */
	public static String getAfterDayDate(String days) {
		int daysInt = Integer.parseInt(days);

		Calendar canlendar = Calendar.getInstance(); // java.util包
		canlendar.add(Calendar.DATE, daysInt); // 日期减 如果不够减会将月变动
		Date date = canlendar.getTime();

		SimpleDateFormat sdfd = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		String dateStr = sdfd.format(date);

		return dateStr;
	}
	/**
	 *  根据当前日期加上给定的天数  （减去 number 给成负数 如 -1）
	 * @param date 当前日期
	 * @param number 天数 
	 * @return
	 */
	public static Date getAfterNumberDay(Date date ,Integer number) {
		Calendar canlendar = Calendar.getInstance();
		canlendar.setTime(date);
		canlendar.add(Calendar.DATE, number);
		return canlendar.getTime();
	}
	
	/**
	 * 得到n天之后是周几
	 * 
	 * @param days
	 * @return
	 */
	public static String getAfterDayWeek(String days) {
		int daysInt = Integer.parseInt(days);
		Calendar canlendar = Calendar.getInstance(); // java.util包
		canlendar.add(Calendar.DATE, daysInt); // 日期减 如果不够减会将月变动
		Date date = canlendar.getTime();
		SimpleDateFormat sdf = new SimpleDateFormat("E");
		String dateStr = sdf.format(date);
		return dateStr;
	}

	/**
	 * end为空，则为当前时间
	 * 
	 * @param begin 开始时间
	 * @param end   结束时间
	 * @return 时间相减
	 */
	public String subtrDateTime(String begin, String end) {
		String result = "";
		Long beginTime = fromDateStringToLong(begin);
		if (end.equals("")) {
			end = getCurrentDateTime();
		}
		Long endTime = fromDateStringToLong(end);
		long mint = (endTime - beginTime);
		result = format(mint);
		return result;
	}

	public String subtrDateTime(Long beginTime, String end) {
		String result = "";
		if (end.equals("")) {
			end = getCurrentDateTime();
		}
		Long endTime = fromDateStringToLong(end);
		long mint = (endTime - beginTime);
		result = format(mint);
		return result;
	}

	// 将毫秒数换算成 x天x时x分x秒x毫秒
	public static String format(long ms) {
		int ss = 1000;
		int mi = ss * 60;
		int hh = mi * 60;
		int dd = hh * 24;

		long day = ms / dd;
		long hour = (ms - day * dd) / hh;
		long minute = (ms - day * dd - hour * hh) / mi;
		long second = (ms - day * dd - hour * hh - minute * mi) / ss;
		long milliSecond = ms - day * dd - hour * hh - minute * mi - second * ss;

		String strDay = day < 10 ? "" + day : "" + day;
		String strHour = hour < 10 ? "0" + hour : "" + hour;
		String strMinute = minute < 10 ? "0" + minute : "" + minute;
		String strSecond = second < 10 ? "0" + second : "" + second;
		String strMilliSecond = milliSecond < 10 ? "0" + milliSecond : "" + milliSecond;
		strMilliSecond = milliSecond < 100 ? "0" + strMilliSecond : "" + strMilliSecond;

		return strDay + "天 " + strHour + ":" + strMinute + ":" + strSecond;

	}

	/**
	 * 返回当前日期
	 * @return yyyy-MM-dd HH:mm
	 */
	public static String getCurrentDateTime() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		return sdf.format(new Date());

	}
	
	
	/**
	 * 	返回当前日期
	 * @return yyyy-MM-dd
	 */
	public static String getToday() {
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		return sdf.format(new Date());

	}

	public static long fromDateStringToLong(String intime) {
		Date date = null;
		SimpleDateFormat inputFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm");
		try {
			date = inputFormat.parse(intime);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return date.getTime();
	}

	/**
	 * 判断时间戳是否大于60分钟，大于返回false，小于返回true
	 * 
	 * @param inputDateTime yyyyMMddHHmmss格式
	 * @return
	 */
	public static boolean timestampsStatus(String timestamps) {
		java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyyMMddHHmmss");
		java.util.Date beginDate = null;
		java.util.Date endDate = new Date();

		try {
			beginDate = format.parse(timestamps);

		} catch (ParseException e) {
			e.printStackTrace();
		}
		long mint = (endDate.getTime() - beginDate.getTime()) / (1000 * 60);
		if (mint > 60) {
			return false;
		}
		return true;
	}

	/**
	 * 输入的时间yyyy-MM-dd HH:mm:ss 大于返回false，小于返回true 输入的时间和当前时间差
	 * 
	 * @param beginDateStr
	 * @return
	 */
	public static boolean timeDifference(String beginDateStr) {

		try {
			java.text.SimpleDateFormat format = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			java.util.Date beginDate = null;
			java.util.Date endDate = new Date();

			try {
				beginDate = format.parse(beginDateStr);

			} catch (ParseException e) {
				e.printStackTrace();
			}
			long mint = (endDate.getTime() - beginDate.getTime());
			if (mint > 0) {
				return false;
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		return true;

	}

	/**
	 * 当前时间-给定时间超过number天返回true否则返回false
	 * 
	 * @param time
	 * @return
	 */
	public static boolean timeDifferenceByDay(Date time, int num) {
		Date now = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(time);
		cal.add(Calendar.DATE, num);
		Date overTime = cal.getTime();
		if (overTime.before(now)) {
			return true;
		}
		return false;
	}

	public static boolean timeDifferenceByDay2(Date time, int num) {
		Date now = new Date();
		Calendar cal = Calendar.getInstance();
		cal.setTime(time);
		cal.add(Calendar.MINUTE, num);
		Date overTime = cal.getTime();
		if (overTime.before(now)) {
			return true;
		}
		return false;
	}
	
	
	public static void main(String[] args) {
	}

}
