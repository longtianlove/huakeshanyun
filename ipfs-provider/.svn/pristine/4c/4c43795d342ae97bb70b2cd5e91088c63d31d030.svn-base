package com.stys.ipfs.service.impl;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.BeanUtils;

import com.alibaba.dubbo.config.annotation.Reference;
import com.alibaba.dubbo.config.annotation.Service;
import com.baomidou.mybatisplus.mapper.EntityWrapper;
import com.baomidou.mybatisplus.service.impl.ServiceImpl;
import com.stys.ipfs.code.IncomeOrOut;
import com.stys.ipfs.dto.TbUsdtVO;
import com.stys.ipfs.entity.Dic;
import com.stys.ipfs.entity.TbAssetsDetail;
import com.stys.ipfs.entity.TbTransferUsdt;
import com.stys.ipfs.entity.TbUsdt;
import com.stys.ipfs.entity.TbUserAssets;
import com.stys.ipfs.mapper.TbUsdtMapper;
import com.stys.ipfs.service.IAppUserService;
import com.stys.ipfs.service.IDicService;
import com.stys.ipfs.service.ITbAssetsDetailService;
import com.stys.ipfs.service.ITbTransferUsdtService;
import com.stys.ipfs.service.ITbUsdtService;
import com.stys.ipfs.service.ITbUserAssetsService;
import com.stys.ipfs.util.BigDecimalUtils;
import com.stys.ipfs.util.SMSUtil;
import com.stys.ipfs.util.StringUtils;
import com.stys.ipfs.util.TwoDimensionCode;
import com.stys.ipfs.util.UUIdUtils;
import com.stys.ipfs.util.usdt.Account;
import com.stys.ipfs.util.usdt.CoinUtils;
import com.stys.ipfs.util.usdt.HttpUtil;

/**
 * <p>
 * 服务实现类
 * </p>
 *
 * @author dp
 * @since 2019-03-12
 */
@Service(version = "1.0.0", timeout = 60000)
public class TbUsdtServiceImpl extends ServiceImpl<TbUsdtMapper, TbUsdt> implements ITbUsdtService {

	private Logger logger = Logger.getLogger(getClass());

	@Reference(version = "1.0.0", check = false)
	private IDicService idicService;

	@Reference(version = "1.0.0", check = false)
	private ITbUsdtService itbUsdtService;

	@Reference(version = "1.0.0", check = false)
	private IAppUserService iappUserService;

	@Reference(version = "1.0.0", check = false)
	private ITbUserAssetsService itbUserAssetsService;

	@Reference(version = "1.0.0", check = false)
	private ITbTransferUsdtService itbTransferUsdtService;

	@Reference(version = "1.0.0", check = false)
	private ITbAssetsDetailService itbAssetsDetailService;

	@Override
	public TbUsdt getUnUseOne() {

		TbUsdtVO tbUsdtVO = this.baseMapper.selectUnUseOne();
		if (null != tbUsdtVO) {
			TbUsdt tbUsdt = new TbUsdt();
			BeanUtils.copyProperties(tbUsdtVO, tbUsdt);
			return tbUsdt;
		}
		return null;
	}

	@Override
	public void makeUSDTData() {
		TbUsdt tbUsdt = new TbUsdt();
		try {
			for (int i = 0; i < 50000; i++) {
				String address = CoinUtils.getInstance().getNewaddress();
				String privateKey = CoinUtils.getInstance().dumpprivkey(address);
				tbUsdt.setStatus(0);
				tbUsdt.setUsdtBalance(0f);
				tbUsdt.setUsdtPrivatekey(privateKey);
				tbUsdt.setUsdtAddr(address);

				TwoDimensionCode.getEncode(address, "");
				this.insert(tbUsdt);
			}

		} catch (Throwable e) {

			logger.info("-----------错误 -------");
			e.printStackTrace();
		}

	}

	@Override
	public void rechargeUSDTServer() {
		try {
			logger.error("-----------错误 -------" + HttpUtil.isConnect(Account.url));
			if (HttpUtil.isConnect(Account.url)) {
				logger.info("USDT  Net  link normal");
				// 查询有余额的usdt
				ArrayList<LinkedHashMap<?, ?>> walletaddressbalances = CoinUtils.getInstance()
						.getwalletaddressbalances();
				for (LinkedHashMap<?, ?> linkedHashMap : walletaddressbalances) {
					String address = (String) linkedHashMap.get("address");
					// 查询交易明细
					ArrayList<LinkedHashMap<?, ?>> arr = CoinUtils.getInstance().listtransactions(address);
					for (LinkedHashMap<?, ?> linkedHashMap2 : arr) {

						String txid = (String) linkedHashMap2.get("txid");
						String sendingaddress = (String) linkedHashMap2.get("sendingaddress");
						String referenceaddress = (String) linkedHashMap2.get("referenceaddress");
						Integer confirmations = (Integer) linkedHashMap2.get("confirmations");
						String amount = "0";

						if (!StringUtils.isEmpty(linkedHashMap2.get("amount"))) {
							amount = (String) linkedHashMap2.get("amount");
						}
						if (confirmations > 0) {

							// 充值
							List<TbTransferUsdt> tbTransferUsdtList = itbTransferUsdtService
									.selectList(new EntityWrapper<TbTransferUsdt>().eq("toAddress", referenceaddress)
											.eq("txid", txid));
							// 判断是否已经充值
							if (tbTransferUsdtList.size() == 0) {
								logger.info("referenceaddress---->" + referenceaddress);
								TbUsdtVO tbUsdtVO = iappUserService.selectUserIdByUSDTAddress(referenceaddress);

								// 判断usdt是否被用户使用
								if (null != tbUsdtVO && null != tbUsdtVO.getUserId()) {
									// 增加usdt转账日志信息
									TbTransferUsdt tbTransferUsdt = new TbTransferUsdt();
									tbTransferUsdt.setFromaddress(sendingaddress);
									tbTransferUsdt.setToaddress(referenceaddress);
									tbTransferUsdt.setTxid(txid);
									tbTransferUsdt.setUserId(tbUsdtVO.getUserId());
									tbTransferUsdt.setStatus(1);
									tbTransferUsdt.setConfirmations(confirmations);
									Float balance = Float.valueOf(amount);
									tbTransferUsdt.setBalance(balance);
									boolean transdferUsdt_flag = itbTransferUsdtService.insert(tbTransferUsdt);
									Dic dic = idicService.getDicData("系统账号", "USDT");

									if (transdferUsdt_flag) {
										// if (Double.valueOf(amount) > 0 && Double.valueOf(amount) >= 100) {
										// 通过usdt 地址 查询用户账号
										Integer user_id = tbUsdtVO.getUserId();
										// 用户资产表
										updateAssist(referenceaddress, tbTransferUsdt, balance, user_id);
										/*
										 * } else {
										 * 
										 * String totle_txid = CoinUtils.getInstance().send(referenceaddress,
										 * "1MMY1PbTTB3nx4byV6UnGrfdiX5CyLtwLF", 31, Double.valueOf(amount),
										 * dic.getValue1()); logger.warn("\n" + referenceaddress +
										 * ": The balance is too small,so to send '1MMY1PbTTB3nx4byV6UnGrfdiX5CyLtwLF' address,back result "
										 * + totle_txid + " \n"); }
										 */

									}
								}
							}
						}
					}
				}
			}

		} catch (Throwable e1) {
			SMSUtil.doGetStr("15802912094", "USDT余额不足 ！");
			e1.printStackTrace();
		}
	}

	/**
	 * 更新资产
	 * 
	 * @param referenceaddress
	 * @param tbTransferUsdt
	 * @param balance
	 * @param user_id
	 */
	private void updateAssist(String referenceaddress, TbTransferUsdt tbTransferUsdt, Float balance, Integer user_id) {
		TbUserAssets tbUserAssets = itbUserAssetsService
				.selectOne(new EntityWrapper<TbUserAssets>().eq("user_id", user_id));
		synchronized (tbUserAssets) {

			// 转成人民币
			String new_balance = BigDecimalUtils.multiply(String.valueOf(balance), "6.72");

			Double coin = tbUserAssets.getCoin();
			// 增加余额
			String new_coin = BigDecimalUtils.add(String.valueOf(coin), new_balance);
			tbUserAssets.setCoin(Double.valueOf(new_coin));
			// 更新个人资产
			if (itbUserAssetsService.updateById(tbUserAssets)) {
				logger.info("金额修改成功：-->");
				// 增加日志
				addAssetsDetail(tbTransferUsdt, new_balance, coin, new_coin);
				// 转账到总账户
				String mainUSDT_address = idicService.getDicData("账变类型", "USDT充值").getValue1();
				if (transferTotalAssets(referenceaddress, tbTransferUsdt, balance, user_id, mainUSDT_address)) {
					logger.info("归集成功：" + referenceaddress + "-->" + tbTransferUsdt);
				}

				logger.info("归集balance：" + balance + "--user_id-->" + user_id);
			}

		}
	}

	private void addAssetsDetail(TbTransferUsdt tbTransferUsdt, String new_balance, Double coin, String new_coin) {
		TbAssetsDetail tbAssetsDetail = new TbAssetsDetail();
		tbAssetsDetail.setId(UUIdUtils.getUUID());
		tbAssetsDetail.setAfterAmount(Double.valueOf(new_coin));
		tbAssetsDetail.setAmount(Double.valueOf(new_balance));
		tbAssetsDetail.setBeforeAmount(coin);
		tbAssetsDetail.setInOrOut(IncomeOrOut.income.getCode());
		tbAssetsDetail.setType(idicService.getDicData("账变类型", "USDT充值").getId());
		tbAssetsDetail.setUserId(tbTransferUsdt.getUserId());
		tbAssetsDetail.setAccountType(1);// 金币
		// 插入转账明细
		if (itbAssetsDetailService.insert(tbAssetsDetail)) {
			logger.info("插入转账明细 success");
		}
	}

	/**
	 * 转账到总账户 并增加日志
	 * 
	 * @param referenceaddress
	 * @param tbTransferUsdt
	 * @param balance
	 * @param user_id
	 * @param mainAddress
	 * @throws Throwable
	 */
	private boolean transferTotalAssets(String referenceaddress, TbTransferUsdt tbTransferUsdt, Float balance,
			Integer user_id, String mainAddress) {
		try {
			String totle_txid = CoinUtils.getInstance().send(referenceaddress, mainAddress, 31, balance, mainAddress);
			if (null != totle_txid) {

				TbTransferUsdt tbTransferUsdt2 = new TbTransferUsdt();
				tbTransferUsdt2.setBalance(balance);
				tbTransferUsdt2.setConfirmations(0);
				tbTransferUsdt2.setFromaddress(referenceaddress);
				tbTransferUsdt2.setToaddress(mainAddress);
				tbTransferUsdt2.setStatus(1);
				tbTransferUsdt2.setTxid(totle_txid);
				tbTransferUsdt2.setUserId(user_id);
				return itbTransferUsdtService.insert(tbTransferUsdt);
			}
		} catch (Throwable e) {
			logger.info("归集失败：" + referenceaddress + "-->" + tbTransferUsdt + ":余额不足 ");
		}
		return false;
	}

}
